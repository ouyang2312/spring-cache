/**
 * 一、搭建基本环境
 * 1、导入数据库文件 创建出department和employee表
 * 2、创建javaBean封装数据
 * 3、整合MyBatis操作数据库
 * 		1.配置数据源信息
 * 		2.使用注解版的MyBatis；
 * 			1）、@MapperScan指定需要扫描的mapper接口所在的包
 * 二、快速体验缓存
 * 		步骤：
 * 			1、开启基于注解的缓存 @EnableCaching
 * 			2、标注缓存注解即可
 * 				@Cacheable
 * 				@CacheEvict
 * 				@CachePut
 * 默认使用的是ConcurrentMapCacheManager==ConcurrentMapCache；将数据保存在	ConcurrentMap<Object, Object>中
 * 开发中使用缓存中间件；redis、memcached、ehcache；
 * 三、整合redis作为缓存
 * Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。
 * 	1、安装redis：使用docker；
 * 	2、引入redis的starter
 * 	3、配置redis
 * 	4、测试缓存
 * 		原理：CacheManager===Cache 缓存组件来实际给缓存中存取数据
 *		1）、引入redis的starter，容器中保存的是 RedisCacheManager；
 *		2）、RedisCacheManager 帮我们创建 RedisCache 来作为缓存组件；RedisCache通过操作redis缓存数据的
 *		3）、默认保存数据 k-v 都是Object；利用序列化保存；如何保存为json
 *   			1、引入了redis的starter，cacheManager变为 RedisCacheManager；
 *   			2、默认创建的 RedisCacheManager 操作redis的时候使用的是 RedisTemplate<Object, Object>
 *   			3、RedisTemplate<Object, Object> 是 默认使用jdk的序列化机制
 *      4）、自定义CacheManager；
 *
 */


 /**
      * 将方法的运行结果进行缓存；以后再要相同的数据，直接从缓存中获取，不用调用方法；
      * CacheManager管理多个Cache组件的，对缓存的真正CRUD操作在Cache组件中，每一个缓存组件有自己唯一一个名字；
      *

      *
      * 原理：
      *   1、自动配置类；CacheAutoConfiguration
      *   2、缓存的配置类
      *   org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration
      *   org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration
      *   org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration
      *   org.springframework.boot.autoconfigure.cache.HazelcastCacheConfiguration
      *   org.springframework.boot.autoconfigure.cache.InfinispanCacheConfiguration
      *   org.springframework.boot.autoconfigure.cache.CouchbaseCacheConfiguration
      *   org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration
      *   org.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration
      *   org.springframework.boot.autoconfigure.cache.GuavaCacheConfiguration
      *   org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration【默认】
      *   org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration
      *   3、哪个配置类默认生效：SimpleCacheConfiguration；
      *
      *   4、给容器中注册了一个CacheManager：ConcurrentMapCacheManager
      *   5、可以获取和创建ConcurrentMapCache类型的缓存组件；他的作用将数据保存在ConcurrentMap中；
      *
      *   运行流程：
      *   @Cacheable：
      *   1、方法运行之前，先去查询Cache（缓存组件），按照cacheNames指定的名字获取；
      *      （CacheManager先获取相应的缓存），第一次获取缓存如果没有Cache组件会自动创建。
      *   2、去Cache中查找缓存的内容，使用一个key，默认就是方法的参数；
      *      key是按照某种策略生成的；默认是使用keyGenerator生成的，默认使用SimpleKeyGenerator生成key；
      *          SimpleKeyGenerator生成key的默认策略；
      *                  如果没有参数；key=new SimpleKey()；
      *                  如果有一个参数：key=参数的值
      *                  如果有多个参数：key=new SimpleKey(params)；
      *   3、没有查到缓存就调用目标方法；
      *   4、将目标方法返回的结果，放进缓存中
      *
      *   @Cacheable标注的方法执行之前先来检查缓存中有没有这个数据，默认按照参数的值作为key去查询缓存，
      *   如果没有就运行方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据；
      *
      *   核心：
      *      1）、使用CacheManager【ConcurrentMapCacheManager】按照名字得到Cache【ConcurrentMapCache】组件
      *      2）、key使用keyGenerator生成的，默认是SimpleKeyGenerator
      *
      *
      *   几个属性：
      *      cacheNames/value：指定缓存组件的名字;将方法的返回结果放在哪个缓存中，是数组的方式，可以指定多个缓存；
      *
      *      key：缓存数据使用的key；可以用它来指定。默认是使用方法参数的值  1-方法的返回值
      *              编写SpEL； #i d;参数id的值   #a0  #p0  #root.args[0]
      *              getEmp[2]
      *
      *      keyGenerator：key的生成器；可以自己指定key的生成器的组件id
      *              key/keyGenerator：二选一使用;
      *
      *
      *      cacheManager：指定缓存管理器；或者cacheResolver指定获取解析器
      *
      *      condition：指定符合条件的情况下才缓存；
      *              ,condition = "#id>0"
      *          condition = "#a0>1"：第一个参数的值》1的时候才进行缓存
      *
      *      unless:否定缓存；当unless指定的条件为true，方法的返回值就不会被缓存；可以获取到结果进行判断
      *              unless = "#result == null"
      *              unless = "#a0==2":如果第一个参数的值是2，结果不缓存；
      *      sync：是否使用异步模式
      * @param id
      * @return
      *
      */